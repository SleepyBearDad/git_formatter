'\" t
.\"     Title: git-formatter
.\"    Author: Shahar Salzman
.\"      Date: 7/4/2024
.\"  Language: English
.\"
.TH "GIT\-FORMATTER" "1" "7/4/2024"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-formatter \- Checks formatting between commits, commit and working tree, etc
.SH "SYNOPSIS"
.sp
.nf
\fIgit formatter\fR [<commit>]
\fIgit formatter\fR \-\-cached [<commit>]
\fIgit formatter\fR <commit> <commit>
.fi
.sp
.SH "DESCRIPTION"
.sp
Checks formatting between the working tree and the index or a tree, between the index and a tree, between two trees, or between two files on disk\&.
.PP
\fIgit formatter\fR
.RS 4
This form is to check formatting you made relative to the index (staging area for the next commit)\&. In other words, the differences are what you
\fIcould\fR
tell Git to further add to the index but you still haven\(cqt\&. You can stage these changes by using
\fBgit-add\fR(1)\&.
.sp
If exactly two paths are given and at least one points outside the current repository,
\fIgit formatter\fR
will compare the two files / directories\&. This behavior can be forced by \-\-no\-index\&.
.RE
.PP
\fIgit formatter\fR \-\-cached [<commit>]
.RS 4
This form is to check formatting you staged for the next commit relative to the named <commit>\&. Typically you would want comparison with the latest commit, so if you do not give <commit>, it defaults to HEAD\&. If HEAD does not exist (e\&.g\&. unborned branches) and <commit> is not given, it shows all staged changes\&. \-\-staged is a synonym of \-\-cached\&.
.RE
.PP
\fIgit formatter\fR <commit>
.RS 4
This form is to check formatting you have in your working tree relative to the named <commit>\&. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch\&.
.RE
.PP
\fIgit formatter\fR <commit> <commit>
.RS 4
This is to check formatting between two arbitrary <commit>\&.
.RE
.PP
